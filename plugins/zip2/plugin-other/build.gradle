buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }

    dependencies {

        classpath 'com.tencent.shadow.core:runtime'
        classpath 'com.tencent.shadow.core:activity-container'
        classpath 'com.tencent.shadow.core:gradle-plugin'
        classpath "org.javassist:javassist:$javassist_version"

    }
}

//apply plugin: 'com.tencent.shadow.plugin'
plugins {
    id 'com.android.application'
    id 'com.tencent.shadow.plugin'
    id 'kotlin-android'
}



android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId 'com.nolovr.shadow.core.plugin.app2'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

    }

    // 将插件applicationId设置为和宿主相同
    productFlavors {
        plugin {
            applicationId project.DEV_HOST_APP_APPLICATION_ID
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        additionalParameters "--package-id", "0x3E", "--allow-reserved-package-id"
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly 'com.tencent.shadow.core:runtime'
}


def createDuplicateApkTask(buildType) {
    def apkDir = file("${getBuildDir()}/outputs/apk/plugin/$buildType")

    return tasks.create("duplicatePlugin${buildType.capitalize()}ApkTask", Copy) {
        group = 'build'
        description = "复制一个plugin-other-plugin-${buildType}.apk用于测试目的"
        from(apkDir) {
            include("plugin-other-plugin-${buildType}.apk")
            rename { "plugin-other-plugin-${buildType}2.apk" }
        }
        into(apkDir)

    }.dependsOn(":plugin-other:assemblePlugin${buildType.capitalize()}")
}

tasks.whenTaskAdded { task ->
    if (task.name == "assemblePluginDebug") {
        def createTask = createDuplicateApkTask('debug')
        task.finalizedBy(createTask)
    }
    if (task.name == "assemblePluginRelease") {
        def createTask = createDuplicateApkTask('release')
        task.finalizedBy(createTask)
    }
}



shadow {
    transform {
//        useHostContext = ['abc']
    }

    packagePlugin {
        pluginTypes {
            debug {
                loaderApkConfig = new Tuple2('dev-loader-debug.apk', ':dev-loader:assembleDebug')
                runtimeApkConfig = new Tuple2('dev-runtime-debug.apk', ':dev-runtime:assembleDebug')
                pluginApks {
                    pluginApk1 {
                        businessName = 'dev-plugin-xx'
                        partKey = 'dev-plugin-xx'
                        buildTask = ':plugin-other:assemblePluginDebug'
                        apkPath = 'plugins/zip2/plugin-other/build/outputs/apk/plugin/debug/plugin-other-plugin-debug.apk'
                        hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
//                        dependsOn = ['dev-base']
                    }
                }
            }

            release {
                loaderApkConfig = new Tuple2('dev-loader-release.apk', ':dev-loader:assembleRelease')
                runtimeApkConfig = new Tuple2('dev-runtime-release.apk', ':dev-runtime:assembleRelease')
                pluginApks {
                    pluginApk1 {
                        businessName = 'dev-plugin-xx'
                        partKey = 'dev-plugin-xx'
                        buildTask = ':plugin-other:assemblePluginRelease'
                        apkPath = 'plugins/zip2/plugin-other/build/outputs/apk/plugin/debug/plugin-other-plugin-debug.apk'
                        hostWhiteList = ["com.tencent.shadow.sample.host.lib"]
//                        dependsOn = ['dev-base']
                    }
                }
            }
        }

        loaderApkProjectPath = 'plugins/dev-loader'
        runtimeApkProjectPath = 'plugins/dev-runtime'

        archiveSuffix = System.getenv("PluginSuffix") ?: ""
        archivePrefix = 'plugin2'
        destinationDir = "${getRootProject().getBuildDir()}"

        println("====destinationDir ${destinationDir}")

        version = 4
        compactVersion = [1, 2, 3]
        uuidNickName = "1.1.5"
    }
}