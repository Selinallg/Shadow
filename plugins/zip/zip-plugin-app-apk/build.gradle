buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }

    dependencies {
        classpath 'com.tencent.shadow.core:runtime'
        classpath 'com.tencent.shadow.core:activity-container'
        classpath 'com.tencent.shadow.core:gradle-plugin'
        classpath "org.javassist:javassist:$javassist_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'

android {
    compileSdk project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId 'com.nolovr.shadow.core.plugin.app'
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
    }

    // 签名配置
    signingConfigs {

        noloDev {
            storeFile file("../../../keystore/nolo-dev.jks")
            storePassword "nolo20150420"
            keyAlias "nolo-dev"
            keyPassword "nolo20150420"

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.noloDev
        }
    }

    // 将插件applicationId设置为和宿主相同
    productFlavors {
        plugin {
            applicationId project.DEV_HOST_APP_APPLICATION_ID
        }
    }

    lintOptions {
        abortOnError false
    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }
}

dependencies {
    //注意dev-host-lib要用compileOnly编译而不打包在插件中。在packagePlugin任务中配置hostWhiteList允许插件访问宿主的类。
    pluginCompileOnly project(":host:depend:dev-host-lib")
    normalImplementation project(":host:depend:dev-host-lib")

    pluginCompileOnly project(":plugins:plugin-base-lib")
    normalImplementation project(":plugins:plugin-base-lib")

    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly 'com.tencent.shadow.core:runtime'
}

preBuild.dependsOn(":host:depend:dev-host-lib:jarDebugPackage")


def createDuplicateApkTask(buildType) {
    def apkDir = file("${getBuildDir()}/outputs/apk/plugin/$buildType")

    return tasks.create("duplicatePlugin${buildType.capitalize()}ApkTask", Copy) {
        group = 'build'
        description = "复制一个dev-app-plugin-${buildType}.apk用于测试目的"
        from(apkDir) {
            include("zip-plugin-app-apk-plugin-${buildType}.apk")
            rename { "zip-plugin-app-apk-plugin-${buildType}2.apk" }
//            include(":plugins:zips:zip-plugin-app-apk-plugin-${buildType}.apk")
//            rename { ":plugins:zips:zip-plugin-app-apk-plugin-${buildType}2.apk" }
        }
        into(apkDir)

    }.dependsOn(":plugins:zips:zip-plugin-app-apk:assemblePlugin${buildType.capitalize()}")
}

tasks.whenTaskAdded { task ->
    if (task.name == "assemblePluginDebug") {
        def createTask = createDuplicateApkTask('debug')
        task.finalizedBy(createTask)
    }
    if (task.name == "assemblePluginRelease") {
        def createTask = createDuplicateApkTask('release')
        task.finalizedBy(createTask)
    }
}


shadow {
    transform {
//        useHostContext = ['abc']
    }

    packagePlugin {
        pluginTypes {
            debug {
//                loaderApkConfig = new Tuple2('dev-loader-debug.apk', ':dev-loader:assembleDebug')
//                runtimeApkConfig = new Tuple2('dev-runtime-debug.apk', ':dev-runtime:assembleDebug')
                pluginApks {
                    pluginApk0 {
                        businessName = 'plugin-demo-apk'
                        partKey = 'plugin-demo-apk' //很关键必须一致
                        buildTask = ':plugins:plugin-demo-apk:assemblePluginDebug'
                        apkPath = 'plugins/zip/plugin-demo-apk/build/outputs/apk/plugin/debug/plugin-demo-apk-plugin-debug.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                        dependsOn = ['plugin-common']
                    }
                    pluginApk1 {
                        businessName = 'dev-plugin-app'
                        partKey = 'dev-plugin-app'
                        buildTask = ':plugins:zips:zip-plugin-app-apk:assemblePluginDebug'
                        apkPath = 'plugins/zip/zip-plugin-app-apk/build/outputs/apk/plugin/debug/zip-plugin-app-apk-plugin-debug.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                        dependsOn = ['plugin-base-apk','plugin-common']
                    }
                    pluginApk2 {
                        businessName = 'dev-plugin-app2'
                        partKey = 'dev-plugin-app2'
                        buildTask = ':plugins:zips:zip-plugin-app-apk:assemblePluginDebug'
                        apkPath = 'plugins/zip/zip-plugin-app-apk/build/outputs/apk/plugin/debug/zip-plugin-app-apk-plugin-debug2.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                        dependsOn = ['plugin-base-apk','plugin-common']
                    }
                    pluginApk3 {
                        businessName = 'plugin-service-apk'
                        partKey = 'plugin-service-apk'
                        buildTask = ':plugins:plugin-service-apk:assemblePluginDebug'
                        apkPath = 'plugins/zip/plugin-service-apk/build/outputs/apk/plugin/debug/plugin-service-apk-plugin-debug.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib","com.nolovr.shadow.core.host.lib.cb"]
                        dependsOn = ['plugin-common']
                    }
                    sampleBase {
                        businessName = 'dev-plugin-app'
                        partKey = 'plugin-base-apk'
                        buildTask = ':plugins:plugin-base-apk:assemblePluginDebug'
                        apkPath = 'plugins/zip/plugin-base-apk/build/outputs/apk/plugin/debug/plugin-base-apk-plugin-debug.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                        dependsOn = ['plugin-common']
                    }
                }
            }

            release {
//                loaderApkConfig = new Tuple2('dev-loader-release.apk', ':dev-loader:assembleRelease')
//                runtimeApkConfig = new Tuple2('dev-runtime-release.apk', ':dev-runtime:assembleRelease')
                pluginApks {
                    pluginApk0 {
                        businessName = 'plugin-demo-apk'//businessName相同的插件，context获取的Dir是相同的。businessName留空，表示和宿主相同业务，直接使用宿主的Dir。
                        partKey = 'plugin-demo-apk' //很关键必须一致
                        buildTask = ':plugins:plugin-demo-apk:assemblePluginRelease'
                        apkPath = 'plugins/zip/plugin-demo-apk/build/outputs/apk/plugin/release/plugin-demo-apk-plugin-release.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                    }
                    pluginApk1 {
                        businessName = 'dev-plugin-app'
                        partKey = 'dev-plugin-app'
                        buildTask = ':plugins:zips:zip-plugin-app-apk:assemblePluginRelease'
                        apkPath = 'plugins/zip/zip-plugin-app-apk/build/outputs/apk/plugin/release/zip-plugin-app-apk-plugin-release.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                        dependsOn = ['plugin-base-apk','plugin-common']
                    }
                    pluginApk2 {
                        businessName = 'dev-plugin-app2'
                        partKey = 'dev-plugin-app2'
                        buildTask = ':plugins:zips:zip-plugin-app-apk:assemblePluginRelease'
                        apkPath = 'plugins/zip/zip-plugin-app-apk/build/outputs/apk/plugin/release/zip-plugin-app-apk-plugin-release2.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                        dependsOn = ['plugin-base-apk']
                    }
                    pluginApk3 {
                        businessName = 'plugin-service-apk'
                        partKey = 'plugin-service-apk'
                        buildTask = ':plugins:plugin-service-apk:assemblePluginRelease'
                        apkPath = 'plugins/zip/plugin-service-apk/build/outputs/apk/plugin/release/plugin-service-apk-plugin-release.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib","com.nolovr.shadow.core.host.lib.cb"]
                        dependsOn = ['plugin-common']
                    }
                    sampleBase {
                        businessName = 'dev-plugin-app'
                        partKey = 'plugin-base-apk'
                        buildTask = ':plugins:plugin-base-apk:assemblePluginRelease'
                        apkPath = 'plugins/zip/plugin-base-apk/build/outputs/apk/plugin/release/plugin-base-apk-plugin-release.apk'
                        hostWhiteList = ["com.nolovr.shadow.core.host.lib","com.tencent.shadow.sample.host.lib"]
                    }
                }
            }
        }

        //uuid = '1234567890'
        uuid = project.DEV_UUID_BUSINESS_SAMPLE

//        loaderApkProjectPath = 'plugins/dev-loader'
//        runtimeApkProjectPath = 'plugins/dev-runtime'

        archiveSuffix = System.getenv("PluginSuffix") ?: ""
        archivePrefix = project.DEV_ARCHIVE_PREFIX_ZIP_BS1
        destinationDir = "${getRootProject().getBuildDir()}"

        println("====destinationDir ${destinationDir}")

        version = 4
        compactVersion = [1, 2, 3]
        uuidNickName = "1.1.5-zip-业务描述1"
    }
}
